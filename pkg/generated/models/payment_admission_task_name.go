// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PaymentAdmissionTaskName Identifies the payment admission task to be executed
// swagger:model PaymentAdmissionTaskName
type PaymentAdmissionTaskName string

const (

	// PaymentAdmissionTaskNameCustomerCheck captures enum value "customer_check"
	PaymentAdmissionTaskNameCustomerCheck PaymentAdmissionTaskName = "customer_check"

	// PaymentAdmissionTaskNameAccountCheck captures enum value "account_check"
	PaymentAdmissionTaskNameAccountCheck PaymentAdmissionTaskName = "account_check"

	// PaymentAdmissionTaskNameConfirmToScheme captures enum value "confirm_to_scheme"
	PaymentAdmissionTaskNameConfirmToScheme PaymentAdmissionTaskName = "confirm_to_scheme"

	// PaymentAdmissionTaskNameRejectToScheme captures enum value "reject_to_scheme"
	PaymentAdmissionTaskNameRejectToScheme PaymentAdmissionTaskName = "reject_to_scheme"
)

// for schema
var paymentAdmissionTaskNameEnum []interface{}

func init() {
	var res []PaymentAdmissionTaskName
	if err := json.Unmarshal([]byte(`["customer_check","account_check","confirm_to_scheme","reject_to_scheme"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentAdmissionTaskNameEnum = append(paymentAdmissionTaskNameEnum, v)
	}
}

func (m PaymentAdmissionTaskName) validatePaymentAdmissionTaskNameEnum(path, location string, value PaymentAdmissionTaskName) error {
	if err := validate.Enum(path, location, value, paymentAdmissionTaskNameEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment admission task name
func (m PaymentAdmissionTaskName) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentAdmissionTaskNameEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentAdmissionTaskName) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
