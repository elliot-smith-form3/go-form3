// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TaskRelationships task relationships
// swagger:model TaskRelationships
type TaskRelationships struct {

	// payment
	Payment *RelationshipPayments `json:"payment,omitempty"`

	// payment admission
	PaymentAdmission *RelationshipPaymentAdmissions `json:"payment_admission,omitempty"`

	// tasks
	Tasks *RelationshipTask `json:"tasks,omitempty"`
}

func TaskRelationshipsWithDefaults(defaults client.Defaults) *TaskRelationships {
	return &TaskRelationships{

		Payment: RelationshipPaymentsWithDefaults(defaults),

		PaymentAdmission: RelationshipPaymentAdmissionsWithDefaults(defaults),

		Tasks: RelationshipTaskWithDefaults(defaults),
	}
}

func (m *TaskRelationships) WithPayment(payment RelationshipPayments) *TaskRelationships {

	m.Payment = &payment

	return m
}

func (m *TaskRelationships) WithoutPayment() *TaskRelationships {
	m.Payment = nil
	return m
}

func (m *TaskRelationships) WithPaymentAdmission(paymentAdmission RelationshipPaymentAdmissions) *TaskRelationships {

	m.PaymentAdmission = &paymentAdmission

	return m
}

func (m *TaskRelationships) WithoutPaymentAdmission() *TaskRelationships {
	m.PaymentAdmission = nil
	return m
}

func (m *TaskRelationships) WithTasks(tasks RelationshipTask) *TaskRelationships {

	m.Tasks = &tasks

	return m
}

func (m *TaskRelationships) WithoutTasks() *TaskRelationships {
	m.Tasks = nil
	return m
}

// Validate validates this task relationships
func (m *TaskRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentAdmission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskRelationships) validatePayment(formats strfmt.Registry) error {

	if swag.IsZero(m.Payment) { // not required
		return nil
	}

	if m.Payment != nil {
		if err := m.Payment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment")
			}
			return err
		}
	}

	return nil
}

func (m *TaskRelationships) validatePaymentAdmission(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentAdmission) { // not required
		return nil
	}

	if m.PaymentAdmission != nil {
		if err := m.PaymentAdmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment_admission")
			}
			return err
		}
	}

	return nil
}

func (m *TaskRelationships) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	if m.Tasks != nil {
		if err := m.Tasks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tasks")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskRelationships) UnmarshalBinary(b []byte) error {
	var res TaskRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *TaskRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
