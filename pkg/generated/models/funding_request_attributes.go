// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FundingRequestAttributes funding request attributes
// swagger:model FundingRequestAttributes
type FundingRequestAttributes struct {

	// amount
	// Required: true
	Amount *string `json:"amount"`

	// bank account
	BankAccount *BankAccount `json:"bank_account,omitempty"`

	// currency
	// Required: true
	Currency *string `json:"currency"`

	// cutoff datetime
	// Format: date-time
	CutoffDatetime strfmt.DateTime `json:"cutoff_datetime,omitempty"`

	// funding entity
	FundingEntity FundingEntity `json:"funding_entity,omitempty"`

	// funding request type
	FundingRequestType FundingRequestType `json:"funding_request_type,omitempty"`

	// reference
	Reference string `json:"reference,omitempty"`
}

func FundingRequestAttributesWithDefaults(defaults client.Defaults) *FundingRequestAttributes {
	return &FundingRequestAttributes{

		Amount: defaults.GetStringPtr("FundingRequestAttributes", "amount"),

		BankAccount: BankAccountWithDefaults(defaults),

		Currency: defaults.GetStringPtr("FundingRequestAttributes", "currency"),

		CutoffDatetime: defaults.GetStrfmtDateTime("FundingRequestAttributes", "cutoff_datetime"),

		// TODO FundingEntity: FundingEntity,

		// TODO FundingRequestType: FundingRequestType,

		Reference: defaults.GetString("FundingRequestAttributes", "reference"),
	}
}

func (m *FundingRequestAttributes) WithAmount(amount string) *FundingRequestAttributes {

	m.Amount = &amount

	return m
}

func (m *FundingRequestAttributes) WithoutAmount() *FundingRequestAttributes {
	m.Amount = nil
	return m
}

func (m *FundingRequestAttributes) WithBankAccount(bankAccount BankAccount) *FundingRequestAttributes {

	m.BankAccount = &bankAccount

	return m
}

func (m *FundingRequestAttributes) WithoutBankAccount() *FundingRequestAttributes {
	m.BankAccount = nil
	return m
}

func (m *FundingRequestAttributes) WithCurrency(currency string) *FundingRequestAttributes {

	m.Currency = &currency

	return m
}

func (m *FundingRequestAttributes) WithoutCurrency() *FundingRequestAttributes {
	m.Currency = nil
	return m
}

func (m *FundingRequestAttributes) WithCutoffDatetime(cutoffDatetime strfmt.DateTime) *FundingRequestAttributes {

	m.CutoffDatetime = cutoffDatetime

	return m
}

func (m *FundingRequestAttributes) WithFundingEntity(fundingEntity FundingEntity) *FundingRequestAttributes {

	m.FundingEntity = fundingEntity

	return m
}

func (m *FundingRequestAttributes) WithFundingRequestType(fundingRequestType FundingRequestType) *FundingRequestAttributes {

	m.FundingRequestType = fundingRequestType

	return m
}

func (m *FundingRequestAttributes) WithReference(reference string) *FundingRequestAttributes {

	m.Reference = reference

	return m
}

// Validate validates this funding request attributes
func (m *FundingRequestAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCutoffDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFundingEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFundingRequestType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FundingRequestAttributes) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *FundingRequestAttributes) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.BankAccount) { // not required
		return nil
	}

	if m.BankAccount != nil {
		if err := m.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bank_account")
			}
			return err
		}
	}

	return nil
}

func (m *FundingRequestAttributes) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *FundingRequestAttributes) validateCutoffDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.CutoffDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("cutoff_datetime", "body", "date-time", m.CutoffDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FundingRequestAttributes) validateFundingEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.FundingEntity) { // not required
		return nil
	}

	if err := m.FundingEntity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("funding_entity")
		}
		return err
	}

	return nil
}

func (m *FundingRequestAttributes) validateFundingRequestType(formats strfmt.Registry) error {

	if swag.IsZero(m.FundingRequestType) { // not required
		return nil
	}

	if err := m.FundingRequestType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("funding_request_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FundingRequestAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FundingRequestAttributes) UnmarshalBinary(b []byte) error {
	var res FundingRequestAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *FundingRequestAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
