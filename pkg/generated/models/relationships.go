// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Relationships relationships
// swagger:model Relationships
type Relationships struct {

	// contact
	Contact *RelationshipsContactProperties `json:"contact,omitempty"`

	// contact account
	ContactAccount *RelationshipsContactAccountProperties `json:"contact_account,omitempty"`

	// party
	Party *RelationshipsPartyProperties `json:"party,omitempty"`

	// party account
	PartyAccount *RelationshipsPartyAccountProperties `json:"party_account,omitempty"`

	// party product
	PartyProduct *RelationshipsPartyProductProperties `json:"party_product,omitempty"`

	// product events
	ProductEvents *RelationshipsProductEventProperties `json:"product_events,omitempty"`
}

func RelationshipsWithDefaults(defaults client.Defaults) *Relationships {
	return &Relationships{

		Contact: RelationshipsContactPropertiesWithDefaults(defaults),

		ContactAccount: RelationshipsContactAccountPropertiesWithDefaults(defaults),

		Party: RelationshipsPartyPropertiesWithDefaults(defaults),

		PartyAccount: RelationshipsPartyAccountPropertiesWithDefaults(defaults),

		PartyProduct: RelationshipsPartyProductPropertiesWithDefaults(defaults),

		ProductEvents: RelationshipsProductEventPropertiesWithDefaults(defaults),
	}
}

func (m *Relationships) WithContact(contact RelationshipsContactProperties) *Relationships {

	m.Contact = &contact

	return m
}

func (m *Relationships) WithoutContact() *Relationships {
	m.Contact = nil
	return m
}

func (m *Relationships) WithContactAccount(contactAccount RelationshipsContactAccountProperties) *Relationships {

	m.ContactAccount = &contactAccount

	return m
}

func (m *Relationships) WithoutContactAccount() *Relationships {
	m.ContactAccount = nil
	return m
}

func (m *Relationships) WithParty(party RelationshipsPartyProperties) *Relationships {

	m.Party = &party

	return m
}

func (m *Relationships) WithoutParty() *Relationships {
	m.Party = nil
	return m
}

func (m *Relationships) WithPartyAccount(partyAccount RelationshipsPartyAccountProperties) *Relationships {

	m.PartyAccount = &partyAccount

	return m
}

func (m *Relationships) WithoutPartyAccount() *Relationships {
	m.PartyAccount = nil
	return m
}

func (m *Relationships) WithPartyProduct(partyProduct RelationshipsPartyProductProperties) *Relationships {

	m.PartyProduct = &partyProduct

	return m
}

func (m *Relationships) WithoutPartyProduct() *Relationships {
	m.PartyProduct = nil
	return m
}

func (m *Relationships) WithProductEvents(productEvents RelationshipsProductEventProperties) *Relationships {

	m.ProductEvents = &productEvents

	return m
}

func (m *Relationships) WithoutProductEvents() *Relationships {
	m.ProductEvents = nil
	return m
}

// Validate validates this relationships
func (m *Relationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartyAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartyProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Relationships) validateContact(formats strfmt.Registry) error {

	if swag.IsZero(m.Contact) { // not required
		return nil
	}

	if m.Contact != nil {
		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *Relationships) validateContactAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.ContactAccount) { // not required
		return nil
	}

	if m.ContactAccount != nil {
		if err := m.ContactAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact_account")
			}
			return err
		}
	}

	return nil
}

func (m *Relationships) validateParty(formats strfmt.Registry) error {

	if swag.IsZero(m.Party) { // not required
		return nil
	}

	if m.Party != nil {
		if err := m.Party.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("party")
			}
			return err
		}
	}

	return nil
}

func (m *Relationships) validatePartyAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.PartyAccount) { // not required
		return nil
	}

	if m.PartyAccount != nil {
		if err := m.PartyAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("party_account")
			}
			return err
		}
	}

	return nil
}

func (m *Relationships) validatePartyProduct(formats strfmt.Registry) error {

	if swag.IsZero(m.PartyProduct) { // not required
		return nil
	}

	if m.PartyProduct != nil {
		if err := m.PartyProduct.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("party_product")
			}
			return err
		}
	}

	return nil
}

func (m *Relationships) validateProductEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductEvents) { // not required
		return nil
	}

	if m.ProductEvents != nil {
		if err := m.ProductEvents.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product_events")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Relationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Relationships) UnmarshalBinary(b []byte) error {
	var res Relationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *Relationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
