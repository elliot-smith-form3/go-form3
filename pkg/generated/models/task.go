// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Task task
// swagger:model Task
type Task struct {

	// attributes
	Attributes *TaskAttributes `json:"attributes,omitempty"`

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// modified on
	// Format: date-time
	ModifiedOn strfmt.DateTime `json:"modified_on,omitempty"`

	// Unique ID of the organisation this resource is created by
	// Format: uuid
	OrganisationID strfmt.UUID `json:"organisation_id,omitempty"`

	// relationships
	Relationships *TaskRelationships `json:"relationships,omitempty"`

	// Name of the resource type
	// Pattern: ^[A-Za-z_]*$
	Type string `json:"type,omitempty"`

	// Version number
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`
}

func TaskWithDefaults(defaults client.Defaults) *Task {
	return &Task{

		Attributes: TaskAttributesWithDefaults(defaults),

		CreatedOn: defaults.GetStrfmtDateTime("Task", "created_on"),

		ID: defaults.GetStrfmtUUID("Task", "id"),

		ModifiedOn: defaults.GetStrfmtDateTime("Task", "modified_on"),

		OrganisationID: defaults.GetStrfmtUUID("Task", "organisation_id"),

		Relationships: TaskRelationshipsWithDefaults(defaults),

		Type: defaults.GetString("Task", "type"),

		Version: defaults.GetInt64Ptr("Task", "version"),
	}
}

func (m *Task) WithAttributes(attributes TaskAttributes) *Task {

	m.Attributes = &attributes

	return m
}

func (m *Task) WithoutAttributes() *Task {
	m.Attributes = nil
	return m
}

func (m *Task) WithCreatedOn(createdOn strfmt.DateTime) *Task {

	m.CreatedOn = createdOn

	return m
}

func (m *Task) WithID(id strfmt.UUID) *Task {

	m.ID = id

	return m
}

func (m *Task) WithModifiedOn(modifiedOn strfmt.DateTime) *Task {

	m.ModifiedOn = modifiedOn

	return m
}

func (m *Task) WithOrganisationID(organisationID strfmt.UUID) *Task {

	m.OrganisationID = organisationID

	return m
}

func (m *Task) WithRelationships(relationships TaskRelationships) *Task {

	m.Relationships = &relationships

	return m
}

func (m *Task) WithoutRelationships() *Task {
	m.Relationships = nil
	return m
}

func (m *Task) WithType(typeVar string) *Task {

	m.Type = typeVar

	return m
}

func (m *Task) WithVersion(version int64) *Task {

	m.Version = &version

	return m
}

func (m *Task) WithoutVersion() *Task {
	m.Version = nil
	return m
}

// Validate validates this task
func (m *Task) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Task) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_on", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateOrganisationID(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganisationID) { // not required
		return nil
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

func (m *Task) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.Pattern("type", "body", string(m.Type), `^[A-Za-z_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Task) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Task) UnmarshalBinary(b []byte) error {
	var res Task
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *Task) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// TaskAttributes task attributes
// swagger:model TaskAttributes
type TaskAttributes struct {

	// Helps to identify the owner of the task.
	// Enum: [customer form3]
	Assignee string `json:"assignee,omitempty"`

	// Key Value map that contains the data required to run the task
	Input map[string]interface{} `json:"input,omitempty"`

	// Identifies the task to be executed
	// Enum: [customer_checks account_check confirm_to_scheme reject_to_scheme]
	Name string `json:"name,omitempty"`

	// Key Value map that contains the Task result.
	Output map[string]interface{} `json:"output,omitempty"`

	// Indicates the Task status. The status `completed` and `failed` are final states, therefore no changes are allowed on these states.
	// Enum: [completed pending failed]
	Status string `json:"status,omitempty"`

	// Identifies the workflow for which the task was created
	// Format: uuid
	Workflow strfmt.UUID `json:"workflow,omitempty"`
}

func TaskAttributesWithDefaults(defaults client.Defaults) *TaskAttributes {
	return &TaskAttributes{

		Assignee: defaults.GetString("TaskAttributes", "assignee"),

		Input: defaults.GetMapStringInterface("TaskAttributes", "input"),

		Name: defaults.GetString("TaskAttributes", "name"),

		Output: defaults.GetMapStringInterface("TaskAttributes", "output"),

		Status: defaults.GetString("TaskAttributes", "status"),

		Workflow: defaults.GetStrfmtUUID("TaskAttributes", "workflow"),
	}
}

func (m *TaskAttributes) WithAssignee(assignee string) *TaskAttributes {

	m.Assignee = assignee

	return m
}

func (m *TaskAttributes) WithInput(input map[string]interface{}) *TaskAttributes {

	m.Input = input

	return m
}

func (m *TaskAttributes) WithName(name string) *TaskAttributes {

	m.Name = name

	return m
}

func (m *TaskAttributes) WithOutput(output map[string]interface{}) *TaskAttributes {

	m.Output = output

	return m
}

func (m *TaskAttributes) WithStatus(status string) *TaskAttributes {

	m.Status = status

	return m
}

func (m *TaskAttributes) WithWorkflow(workflow strfmt.UUID) *TaskAttributes {

	m.Workflow = workflow

	return m
}

// Validate validates this task attributes
func (m *TaskAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taskAttributesTypeAssigneePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["customer","form3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskAttributesTypeAssigneePropEnum = append(taskAttributesTypeAssigneePropEnum, v)
	}
}

const (

	// TaskAttributesAssigneeCustomer captures enum value "customer"
	TaskAttributesAssigneeCustomer string = "customer"

	// TaskAttributesAssigneeForm3 captures enum value "form3"
	TaskAttributesAssigneeForm3 string = "form3"
)

// prop value enum
func (m *TaskAttributes) validateAssigneeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskAttributesTypeAssigneePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TaskAttributes) validateAssignee(formats strfmt.Registry) error {

	if swag.IsZero(m.Assignee) { // not required
		return nil
	}

	// value enum
	if err := m.validateAssigneeEnum("attributes"+"."+"assignee", "body", m.Assignee); err != nil {
		return err
	}

	return nil
}

var taskAttributesTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["customer_checks","account_check","confirm_to_scheme","reject_to_scheme"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskAttributesTypeNamePropEnum = append(taskAttributesTypeNamePropEnum, v)
	}
}

const (

	// TaskAttributesNameCustomerChecks captures enum value "customer_checks"
	TaskAttributesNameCustomerChecks string = "customer_checks"

	// TaskAttributesNameAccountCheck captures enum value "account_check"
	TaskAttributesNameAccountCheck string = "account_check"

	// TaskAttributesNameConfirmToScheme captures enum value "confirm_to_scheme"
	TaskAttributesNameConfirmToScheme string = "confirm_to_scheme"

	// TaskAttributesNameRejectToScheme captures enum value "reject_to_scheme"
	TaskAttributesNameRejectToScheme string = "reject_to_scheme"
)

// prop value enum
func (m *TaskAttributes) validateNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskAttributesTypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TaskAttributes) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("attributes"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var taskAttributesTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["completed","pending","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskAttributesTypeStatusPropEnum = append(taskAttributesTypeStatusPropEnum, v)
	}
}

const (

	// TaskAttributesStatusCompleted captures enum value "completed"
	TaskAttributesStatusCompleted string = "completed"

	// TaskAttributesStatusPending captures enum value "pending"
	TaskAttributesStatusPending string = "pending"

	// TaskAttributesStatusFailed captures enum value "failed"
	TaskAttributesStatusFailed string = "failed"
)

// prop value enum
func (m *TaskAttributes) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskAttributesTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TaskAttributes) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("attributes"+"."+"status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *TaskAttributes) validateWorkflow(formats strfmt.Registry) error {

	if swag.IsZero(m.Workflow) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"workflow", "body", "uuid", m.Workflow.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskAttributes) UnmarshalBinary(b []byte) error {
	var res TaskAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *TaskAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
