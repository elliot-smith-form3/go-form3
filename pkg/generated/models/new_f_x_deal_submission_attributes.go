// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NewFXDealSubmissionAttributes new f x deal submission attributes
// swagger:model NewFXDealSubmissionAttributes
type NewFXDealSubmissionAttributes struct {

	// purpose coded
	// Required: true
	PurposeCoded FXDealSubmissionPurposeCoded `json:"purpose_coded"`

	// reference
	Reference *FXDealSubmissionReference `json:"reference,omitempty"`
}

func NewFXDealSubmissionAttributesWithDefaults(defaults client.Defaults) *NewFXDealSubmissionAttributes {
	return &NewFXDealSubmissionAttributes{

		// TODO PurposeCoded: FXDealSubmissionPurposeCoded,

		// TODO Reference: FXDealSubmissionReference,

	}
}

func (m *NewFXDealSubmissionAttributes) WithPurposeCoded(purposeCoded FXDealSubmissionPurposeCoded) *NewFXDealSubmissionAttributes {

	m.PurposeCoded = purposeCoded

	return m
}

func (m *NewFXDealSubmissionAttributes) WithReference(reference FXDealSubmissionReference) *NewFXDealSubmissionAttributes {

	m.Reference = &reference

	return m
}

func (m *NewFXDealSubmissionAttributes) WithoutReference() *NewFXDealSubmissionAttributes {
	m.Reference = nil
	return m
}

// Validate validates this new f x deal submission attributes
func (m *NewFXDealSubmissionAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePurposeCoded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewFXDealSubmissionAttributes) validatePurposeCoded(formats strfmt.Registry) error {

	if err := m.PurposeCoded.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("purpose_coded")
		}
		return err
	}

	return nil
}

func (m *NewFXDealSubmissionAttributes) validateReference(formats strfmt.Registry) error {

	if swag.IsZero(m.Reference) { // not required
		return nil
	}

	if m.Reference != nil {
		if err := m.Reference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewFXDealSubmissionAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewFXDealSubmissionAttributes) UnmarshalBinary(b []byte) error {
	var res NewFXDealSubmissionAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *NewFXDealSubmissionAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
