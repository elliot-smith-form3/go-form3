// Code generated by go-swagger; DO NOT EDIT.

package fundingrequest_api

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.GetTransactionFundingrequests creates a new GetTransactionFundingrequestsRequest object
// with the default values initialized.
func (c *Client) GetTransactionFundingrequests() *GetTransactionFundingrequestsRequest {
	var ()
	return &GetTransactionFundingrequestsRequest{

		FilterAdmissionStatus: c.Defaults.GetStringPtr("GetTransactionFundingrequests", "filter[admission.status]"),

		FilterAmount: c.Defaults.GetStringPtr("GetTransactionFundingrequests", "filter[amount]"),

		FilterCurrency: c.Defaults.GetStringPtr("GetTransactionFundingrequests", "filter[currency]"),

		FilterCutoffDatetimeFrom: c.Defaults.GetStrfmtDateTimePtr("GetTransactionFundingrequests", "filter[cutoff_datetime_from]"),

		FilterCutoffDatetimeTo: c.Defaults.GetStrfmtDateTimePtr("GetTransactionFundingrequests", "filter[cutoff_datetime_to]"),

		FilterFundingEntity: c.Defaults.GetStringPtr("GetTransactionFundingrequests", "filter[funding_entity]"),

		FilterFundingRequestType: c.Defaults.GetStringPtr("GetTransactionFundingrequests", "filter[funding_request_type]"),

		FilterFxDealID: c.Defaults.GetStrfmtUUIDPtr("GetTransactionFundingrequests", "filter[fx_deal.id]"),

		FilterOrganisationID: make([]strfmt.UUID, 0),

		FilterPartyID: c.Defaults.GetStrfmtUUIDPtr("GetTransactionFundingrequests", "filter[party.id]"),

		FilterReference: c.Defaults.GetStringPtr("GetTransactionFundingrequests", "filter[reference]"),

		FilterTargetCurrency: c.Defaults.GetStringPtr("GetTransactionFundingrequests", "filter[target.currency]"),

		PageNumber: c.Defaults.GetStringPtr("GetTransactionFundingrequests", "page[number]"),

		PageSize: c.Defaults.GetInt64Ptr("GetTransactionFundingrequests", "page[size]"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type GetTransactionFundingrequestsRequest struct {

	/*FilterAdmissionStatus      Find all funding requests for a given admission status      */

	FilterAdmissionStatus *string

	/*FilterAmount      Find all funding requests by amount      */

	FilterAmount *string

	/*FilterCurrency      Find all funding requests by currency      */

	FilterCurrency *string

	/*FilterCutoffDatetimeFrom      Find all funding requests from a certain cutoff date time.      */

	FilterCutoffDatetimeFrom *strfmt.DateTime

	/*FilterCutoffDatetimeTo      Find all funding requests up to a certain cutoff date time.      */

	FilterCutoffDatetimeTo *strfmt.DateTime

	/*FilterFundingEntity      Find all funding requests for a given funding_entity      */

	FilterFundingEntity *string

	/*FilterFundingRequestType      Find all funding requests for a given funding_request_type      */

	FilterFundingRequestType *string

	/*FilterFxDealID      Find all funding requests by fx_deal      */

	FilterFxDealID *strfmt.UUID

	/*FilterOrganisationID      The organisations to filter on      */

	FilterOrganisationID []strfmt.UUID

	/*FilterPartyID      Find all funding requests by party      */

	FilterPartyID *strfmt.UUID

	/*FilterReference      Find all funding requests for a given reference      */

	FilterReference *string

	/*FilterTargetCurrency      The target currency, for example GBP      */

	FilterTargetCurrency *string

	/*PageNumber      Which page to select      */

	PageNumber *string

	/*PageSize      Number of items to select      */

	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *GetTransactionFundingrequestsRequest) FromJson(j string) *GetTransactionFundingrequestsRequest {

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithFilterAdmissionStatus(filterAdmissionStatus string) *GetTransactionFundingrequestsRequest {

	o.FilterAdmissionStatus = &filterAdmissionStatus

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithoutFilterAdmissionStatus() *GetTransactionFundingrequestsRequest {

	o.FilterAdmissionStatus = nil

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithFilterAmount(filterAmount string) *GetTransactionFundingrequestsRequest {

	o.FilterAmount = &filterAmount

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithoutFilterAmount() *GetTransactionFundingrequestsRequest {

	o.FilterAmount = nil

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithFilterCurrency(filterCurrency string) *GetTransactionFundingrequestsRequest {

	o.FilterCurrency = &filterCurrency

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithoutFilterCurrency() *GetTransactionFundingrequestsRequest {

	o.FilterCurrency = nil

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithFilterCutoffDatetimeFrom(filterCutoffDatetimeFrom strfmt.DateTime) *GetTransactionFundingrequestsRequest {

	o.FilterCutoffDatetimeFrom = &filterCutoffDatetimeFrom

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithoutFilterCutoffDatetimeFrom() *GetTransactionFundingrequestsRequest {

	o.FilterCutoffDatetimeFrom = nil

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithFilterCutoffDatetimeTo(filterCutoffDatetimeTo strfmt.DateTime) *GetTransactionFundingrequestsRequest {

	o.FilterCutoffDatetimeTo = &filterCutoffDatetimeTo

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithoutFilterCutoffDatetimeTo() *GetTransactionFundingrequestsRequest {

	o.FilterCutoffDatetimeTo = nil

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithFilterFundingEntity(filterFundingEntity string) *GetTransactionFundingrequestsRequest {

	o.FilterFundingEntity = &filterFundingEntity

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithoutFilterFundingEntity() *GetTransactionFundingrequestsRequest {

	o.FilterFundingEntity = nil

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithFilterFundingRequestType(filterFundingRequestType string) *GetTransactionFundingrequestsRequest {

	o.FilterFundingRequestType = &filterFundingRequestType

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithoutFilterFundingRequestType() *GetTransactionFundingrequestsRequest {

	o.FilterFundingRequestType = nil

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithFilterFxDealID(filterFxDealID strfmt.UUID) *GetTransactionFundingrequestsRequest {

	o.FilterFxDealID = &filterFxDealID

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithoutFilterFxDealID() *GetTransactionFundingrequestsRequest {

	o.FilterFxDealID = nil

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithFilterOrganisationID(filterOrganisationID []strfmt.UUID) *GetTransactionFundingrequestsRequest {

	o.FilterOrganisationID = filterOrganisationID

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithoutFilterOrganisationID() *GetTransactionFundingrequestsRequest {

	o.FilterOrganisationID = nil

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithFilterPartyID(filterPartyID strfmt.UUID) *GetTransactionFundingrequestsRequest {

	o.FilterPartyID = &filterPartyID

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithoutFilterPartyID() *GetTransactionFundingrequestsRequest {

	o.FilterPartyID = nil

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithFilterReference(filterReference string) *GetTransactionFundingrequestsRequest {

	o.FilterReference = &filterReference

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithoutFilterReference() *GetTransactionFundingrequestsRequest {

	o.FilterReference = nil

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithFilterTargetCurrency(filterTargetCurrency string) *GetTransactionFundingrequestsRequest {

	o.FilterTargetCurrency = &filterTargetCurrency

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithoutFilterTargetCurrency() *GetTransactionFundingrequestsRequest {

	o.FilterTargetCurrency = nil

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithPageNumber(pageNumber string) *GetTransactionFundingrequestsRequest {

	o.PageNumber = &pageNumber

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithoutPageNumber() *GetTransactionFundingrequestsRequest {

	o.PageNumber = nil

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithPageSize(pageSize int64) *GetTransactionFundingrequestsRequest {

	o.PageSize = &pageSize

	return o
}

func (o *GetTransactionFundingrequestsRequest) WithoutPageSize() *GetTransactionFundingrequestsRequest {

	o.PageSize = nil

	return o
}

//////////////////
// WithContext adds the context to the get transaction fundingrequests Request
func (o *GetTransactionFundingrequestsRequest) WithContext(ctx context.Context) *GetTransactionFundingrequestsRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the get transaction fundingrequests Request
func (o *GetTransactionFundingrequestsRequest) WithHTTPClient(client *http.Client) *GetTransactionFundingrequestsRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *GetTransactionFundingrequestsRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterAdmissionStatus != nil {

		// query param filter[admission.status]
		var qrFilterAdmissionStatus string
		if o.FilterAdmissionStatus != nil {
			qrFilterAdmissionStatus = *o.FilterAdmissionStatus
		}
		qFilterAdmissionStatus := qrFilterAdmissionStatus
		if qFilterAdmissionStatus != "" {
			if err := r.SetQueryParam("filter[admission.status]", qFilterAdmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterAmount != nil {

		// query param filter[amount]
		var qrFilterAmount string
		if o.FilterAmount != nil {
			qrFilterAmount = *o.FilterAmount
		}
		qFilterAmount := qrFilterAmount
		if qFilterAmount != "" {
			if err := r.SetQueryParam("filter[amount]", qFilterAmount); err != nil {
				return err
			}
		}

	}

	if o.FilterCurrency != nil {

		// query param filter[currency]
		var qrFilterCurrency string
		if o.FilterCurrency != nil {
			qrFilterCurrency = *o.FilterCurrency
		}
		qFilterCurrency := qrFilterCurrency
		if qFilterCurrency != "" {
			if err := r.SetQueryParam("filter[currency]", qFilterCurrency); err != nil {
				return err
			}
		}

	}

	if o.FilterCutoffDatetimeFrom != nil {

		// query param filter[cutoff_datetime_from]
		var qrFilterCutoffDatetimeFrom strfmt.DateTime
		if o.FilterCutoffDatetimeFrom != nil {
			qrFilterCutoffDatetimeFrom = *o.FilterCutoffDatetimeFrom
		}
		qFilterCutoffDatetimeFrom := qrFilterCutoffDatetimeFrom.String()
		if qFilterCutoffDatetimeFrom != "" {
			if err := r.SetQueryParam("filter[cutoff_datetime_from]", qFilterCutoffDatetimeFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterCutoffDatetimeTo != nil {

		// query param filter[cutoff_datetime_to]
		var qrFilterCutoffDatetimeTo strfmt.DateTime
		if o.FilterCutoffDatetimeTo != nil {
			qrFilterCutoffDatetimeTo = *o.FilterCutoffDatetimeTo
		}
		qFilterCutoffDatetimeTo := qrFilterCutoffDatetimeTo.String()
		if qFilterCutoffDatetimeTo != "" {
			if err := r.SetQueryParam("filter[cutoff_datetime_to]", qFilterCutoffDatetimeTo); err != nil {
				return err
			}
		}

	}

	if o.FilterFundingEntity != nil {

		// query param filter[funding_entity]
		var qrFilterFundingEntity string
		if o.FilterFundingEntity != nil {
			qrFilterFundingEntity = *o.FilterFundingEntity
		}
		qFilterFundingEntity := qrFilterFundingEntity
		if qFilterFundingEntity != "" {
			if err := r.SetQueryParam("filter[funding_entity]", qFilterFundingEntity); err != nil {
				return err
			}
		}

	}

	if o.FilterFundingRequestType != nil {

		// query param filter[funding_request_type]
		var qrFilterFundingRequestType string
		if o.FilterFundingRequestType != nil {
			qrFilterFundingRequestType = *o.FilterFundingRequestType
		}
		qFilterFundingRequestType := qrFilterFundingRequestType
		if qFilterFundingRequestType != "" {
			if err := r.SetQueryParam("filter[funding_request_type]", qFilterFundingRequestType); err != nil {
				return err
			}
		}

	}

	if o.FilterFxDealID != nil {

		// query param filter[fx_deal.id]
		var qrFilterFxDealID strfmt.UUID
		if o.FilterFxDealID != nil {
			qrFilterFxDealID = *o.FilterFxDealID
		}
		qFilterFxDealID := qrFilterFxDealID.String()
		if qFilterFxDealID != "" {
			if err := r.SetQueryParam("filter[fx_deal.id]", qFilterFxDealID); err != nil {
				return err
			}
		}

	}

	var valuesFilterOrganisationID []string
	for _, v := range o.FilterOrganisationID {
		valuesFilterOrganisationID = append(valuesFilterOrganisationID, v.String())
	}

	joinedFilterOrganisationID := swag.JoinByFormat(valuesFilterOrganisationID, "")
	// query array param filter[organisation_id]
	if err := r.SetQueryParam("filter[organisation_id]", joinedFilterOrganisationID...); err != nil {
		return err
	}

	if o.FilterPartyID != nil {

		// query param filter[party.id]
		var qrFilterPartyID strfmt.UUID
		if o.FilterPartyID != nil {
			qrFilterPartyID = *o.FilterPartyID
		}
		qFilterPartyID := qrFilterPartyID.String()
		if qFilterPartyID != "" {
			if err := r.SetQueryParam("filter[party.id]", qFilterPartyID); err != nil {
				return err
			}
		}

	}

	if o.FilterReference != nil {

		// query param filter[reference]
		var qrFilterReference string
		if o.FilterReference != nil {
			qrFilterReference = *o.FilterReference
		}
		qFilterReference := qrFilterReference
		if qFilterReference != "" {
			if err := r.SetQueryParam("filter[reference]", qFilterReference); err != nil {
				return err
			}
		}

	}

	if o.FilterTargetCurrency != nil {

		// query param filter[target.currency]
		var qrFilterTargetCurrency string
		if o.FilterTargetCurrency != nil {
			qrFilterTargetCurrency = *o.FilterTargetCurrency
		}
		qFilterTargetCurrency := qrFilterTargetCurrency
		if qFilterTargetCurrency != "" {
			if err := r.SetQueryParam("filter[target.currency]", qFilterTargetCurrency); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber string
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {
			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
