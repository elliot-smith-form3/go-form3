// Code generated by go-swagger; DO NOT EDIT.

package fx_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/form3tech-oss/go-form3/pkg/generated/models"
)

// CreateFXDealSubmissionReader is a Reader for the CreateFXDealSubmission structure.
type CreateFXDealSubmissionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateFXDealSubmissionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateFXDealSubmissionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateFXDealSubmissionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateFXDealSubmissionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateFXDealSubmissionCreated creates a CreateFXDealSubmissionCreated with default headers values
func NewCreateFXDealSubmissionCreated() *CreateFXDealSubmissionCreated {
	return &CreateFXDealSubmissionCreated{}
}

/*CreateFXDealSubmissionCreated handles this case with default header values.

creation response
*/
type CreateFXDealSubmissionCreated struct {

	//Payload

	// isStream: false
	*models.FXDealSubmissionResponse
}

func (o *CreateFXDealSubmissionCreated) Error() string {
	return fmt.Sprintf("[POST /fx/deals/{fx_deal_id}/submissions][%d] createFXDealSubmissionCreated", 201)
}

func (o *CreateFXDealSubmissionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.FXDealSubmissionResponse = new(models.FXDealSubmissionResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.FXDealSubmissionResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFXDealSubmissionBadRequest creates a CreateFXDealSubmissionBadRequest with default headers values
func NewCreateFXDealSubmissionBadRequest() *CreateFXDealSubmissionBadRequest {
	return &CreateFXDealSubmissionBadRequest{}
}

/*CreateFXDealSubmissionBadRequest handles this case with default header values.

bad request
*/
type CreateFXDealSubmissionBadRequest struct {

	//Payload

	// isStream: false
	*models.APIError
}

func (o *CreateFXDealSubmissionBadRequest) Error() string {
	return fmt.Sprintf("[POST /fx/deals/{fx_deal_id}/submissions][%d] createFXDealSubmissionBadRequest", 400)
}

func (o *CreateFXDealSubmissionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFXDealSubmissionForbidden creates a CreateFXDealSubmissionForbidden with default headers values
func NewCreateFXDealSubmissionForbidden() *CreateFXDealSubmissionForbidden {
	return &CreateFXDealSubmissionForbidden{}
}

/*CreateFXDealSubmissionForbidden handles this case with default header values.

forbidden
*/
type CreateFXDealSubmissionForbidden struct {

	//Payload

	// isStream: false
	*models.APIError
}

func (o *CreateFXDealSubmissionForbidden) Error() string {
	return fmt.Sprintf("[POST /fx/deals/{fx_deal_id}/submissions][%d] createFXDealSubmissionForbidden", 403)
}

func (o *CreateFXDealSubmissionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
