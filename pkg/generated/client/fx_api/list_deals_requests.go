// Code generated by go-swagger; DO NOT EDIT.

package fx_api

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.ListDeals creates a new ListDealsRequest object
// with the default values initialized.
func (c *Client) ListDeals() *ListDealsRequest {
	var ()
	return &ListDealsRequest{

		FilterCreatedOnFrom: c.Defaults.GetStrfmtDatePtr("ListDeals", "filter[created_on_from]"),

		FilterCreatedOnTo: c.Defaults.GetStrfmtDatePtr("ListDeals", "filter[created_on_to]"),

		FilterOrganisationID: make([]strfmt.UUID, 0),

		FilterPartyID: c.Defaults.GetStrfmtUUIDPtr("ListDeals", "filter[party_id]"),

		FilterProcessingDateFrom: c.Defaults.GetStrfmtDatePtr("ListDeals", "filter[processing_date_from]"),

		FilterProcessingDateTo: c.Defaults.GetStrfmtDatePtr("ListDeals", "filter[processing_date_to]"),

		FilterSourceAmount: c.Defaults.GetStringPtr("ListDeals", "filter[source.amount]"),

		FilterSourceCurrency: c.Defaults.GetStringPtr("ListDeals", "filter[source.currency]"),

		FilterSubmissionCreatedOnFrom: c.Defaults.GetStrfmtDatePtr("ListDeals", "filter[submission.created_on_from]"),

		FilterSubmissionCreatedOnTo: c.Defaults.GetStrfmtDatePtr("ListDeals", "filter[submission.created_on_to]"),

		FilterSubmissionReference: c.Defaults.GetStringPtr("ListDeals", "filter[submission.reference]"),

		FilterSubmissionStatus: c.Defaults.GetStringPtr("ListDeals", "filter[submission.status]"),

		FilterTargetAmount: c.Defaults.GetStringPtr("ListDeals", "filter[target.amount]"),

		FilterTargetCurrency: c.Defaults.GetStringPtr("ListDeals", "filter[target.currency]"),

		FilterType: c.Defaults.GetStringPtr("ListDeals", "filter[type]"),

		PageNumber: c.Defaults.GetStringPtr("ListDeals", "page[number]"),

		PageSize: c.Defaults.GetInt64Ptr("ListDeals", "page[size]"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type ListDealsRequest struct {

	/*FilterCreatedOnFrom      The created date from which, inclusively, to find FX Deals      */

	FilterCreatedOnFrom *strfmt.Date

	/*FilterCreatedOnTo      The created date until which, inclusively, to find FX Deals      */

	FilterCreatedOnTo *strfmt.Date

	/*FilterOrganisationID      The organisations to filter on      */

	FilterOrganisationID []strfmt.UUID

	/*FilterPartyID      The Party for which to see FX Deals      */

	FilterPartyID *strfmt.UUID

	/*FilterProcessingDateFrom      The processing date from which, inclusively, to find FX Deals      */

	FilterProcessingDateFrom *strfmt.Date

	/*FilterProcessingDateTo      The processing date until which, inclusively, to find FX Deals      */

	FilterProcessingDateTo *strfmt.Date

	/*FilterSourceAmount      The amount of currency to sell      */

	FilterSourceAmount *string

	/*FilterSourceCurrency      The source currency, for example GBP      */

	FilterSourceCurrency *string

	/*FilterSubmissionCreatedOnFrom      The created date of the submission from which, inclusively, to find FX Deals      */

	FilterSubmissionCreatedOnFrom *strfmt.Date

	/*FilterSubmissionCreatedOnTo      The created date of the submission until which, inclusively, to find FX Deals      */

	FilterSubmissionCreatedOnTo *strfmt.Date

	/*FilterSubmissionReference      Reference of the FX Deal Submission associated to look for      */

	FilterSubmissionReference *string

	/*FilterSubmissionStatus      Status of the FX Deal Submission associated to look for      */

	FilterSubmissionStatus *string

	/*FilterTargetAmount      The amount of currency to buy      */

	FilterTargetAmount *string

	/*FilterTargetCurrency      The target currency, for example GBP      */

	FilterTargetCurrency *string

	/*FilterType      The type of foreign exchange      */

	FilterType *string

	/*PageNumber      Which page to select      */

	PageNumber *string

	/*PageSize      Number of items to select      */

	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *ListDealsRequest) FromJson(j string) *ListDealsRequest {

	return o
}

func (o *ListDealsRequest) WithFilterCreatedOnFrom(filterCreatedOnFrom strfmt.Date) *ListDealsRequest {

	o.FilterCreatedOnFrom = &filterCreatedOnFrom

	return o
}

func (o *ListDealsRequest) WithoutFilterCreatedOnFrom() *ListDealsRequest {

	o.FilterCreatedOnFrom = nil

	return o
}

func (o *ListDealsRequest) WithFilterCreatedOnTo(filterCreatedOnTo strfmt.Date) *ListDealsRequest {

	o.FilterCreatedOnTo = &filterCreatedOnTo

	return o
}

func (o *ListDealsRequest) WithoutFilterCreatedOnTo() *ListDealsRequest {

	o.FilterCreatedOnTo = nil

	return o
}

func (o *ListDealsRequest) WithFilterOrganisationID(filterOrganisationID []strfmt.UUID) *ListDealsRequest {

	o.FilterOrganisationID = filterOrganisationID

	return o
}

func (o *ListDealsRequest) WithoutFilterOrganisationID() *ListDealsRequest {

	o.FilterOrganisationID = nil

	return o
}

func (o *ListDealsRequest) WithFilterPartyID(filterPartyID strfmt.UUID) *ListDealsRequest {

	o.FilterPartyID = &filterPartyID

	return o
}

func (o *ListDealsRequest) WithoutFilterPartyID() *ListDealsRequest {

	o.FilterPartyID = nil

	return o
}

func (o *ListDealsRequest) WithFilterProcessingDateFrom(filterProcessingDateFrom strfmt.Date) *ListDealsRequest {

	o.FilterProcessingDateFrom = &filterProcessingDateFrom

	return o
}

func (o *ListDealsRequest) WithoutFilterProcessingDateFrom() *ListDealsRequest {

	o.FilterProcessingDateFrom = nil

	return o
}

func (o *ListDealsRequest) WithFilterProcessingDateTo(filterProcessingDateTo strfmt.Date) *ListDealsRequest {

	o.FilterProcessingDateTo = &filterProcessingDateTo

	return o
}

func (o *ListDealsRequest) WithoutFilterProcessingDateTo() *ListDealsRequest {

	o.FilterProcessingDateTo = nil

	return o
}

func (o *ListDealsRequest) WithFilterSourceAmount(filterSourceAmount string) *ListDealsRequest {

	o.FilterSourceAmount = &filterSourceAmount

	return o
}

func (o *ListDealsRequest) WithoutFilterSourceAmount() *ListDealsRequest {

	o.FilterSourceAmount = nil

	return o
}

func (o *ListDealsRequest) WithFilterSourceCurrency(filterSourceCurrency string) *ListDealsRequest {

	o.FilterSourceCurrency = &filterSourceCurrency

	return o
}

func (o *ListDealsRequest) WithoutFilterSourceCurrency() *ListDealsRequest {

	o.FilterSourceCurrency = nil

	return o
}

func (o *ListDealsRequest) WithFilterSubmissionCreatedOnFrom(filterSubmissionCreatedOnFrom strfmt.Date) *ListDealsRequest {

	o.FilterSubmissionCreatedOnFrom = &filterSubmissionCreatedOnFrom

	return o
}

func (o *ListDealsRequest) WithoutFilterSubmissionCreatedOnFrom() *ListDealsRequest {

	o.FilterSubmissionCreatedOnFrom = nil

	return o
}

func (o *ListDealsRequest) WithFilterSubmissionCreatedOnTo(filterSubmissionCreatedOnTo strfmt.Date) *ListDealsRequest {

	o.FilterSubmissionCreatedOnTo = &filterSubmissionCreatedOnTo

	return o
}

func (o *ListDealsRequest) WithoutFilterSubmissionCreatedOnTo() *ListDealsRequest {

	o.FilterSubmissionCreatedOnTo = nil

	return o
}

func (o *ListDealsRequest) WithFilterSubmissionReference(filterSubmissionReference string) *ListDealsRequest {

	o.FilterSubmissionReference = &filterSubmissionReference

	return o
}

func (o *ListDealsRequest) WithoutFilterSubmissionReference() *ListDealsRequest {

	o.FilterSubmissionReference = nil

	return o
}

func (o *ListDealsRequest) WithFilterSubmissionStatus(filterSubmissionStatus string) *ListDealsRequest {

	o.FilterSubmissionStatus = &filterSubmissionStatus

	return o
}

func (o *ListDealsRequest) WithoutFilterSubmissionStatus() *ListDealsRequest {

	o.FilterSubmissionStatus = nil

	return o
}

func (o *ListDealsRequest) WithFilterTargetAmount(filterTargetAmount string) *ListDealsRequest {

	o.FilterTargetAmount = &filterTargetAmount

	return o
}

func (o *ListDealsRequest) WithoutFilterTargetAmount() *ListDealsRequest {

	o.FilterTargetAmount = nil

	return o
}

func (o *ListDealsRequest) WithFilterTargetCurrency(filterTargetCurrency string) *ListDealsRequest {

	o.FilterTargetCurrency = &filterTargetCurrency

	return o
}

func (o *ListDealsRequest) WithoutFilterTargetCurrency() *ListDealsRequest {

	o.FilterTargetCurrency = nil

	return o
}

func (o *ListDealsRequest) WithFilterType(filterType string) *ListDealsRequest {

	o.FilterType = &filterType

	return o
}

func (o *ListDealsRequest) WithoutFilterType() *ListDealsRequest {

	o.FilterType = nil

	return o
}

func (o *ListDealsRequest) WithPageNumber(pageNumber string) *ListDealsRequest {

	o.PageNumber = &pageNumber

	return o
}

func (o *ListDealsRequest) WithoutPageNumber() *ListDealsRequest {

	o.PageNumber = nil

	return o
}

func (o *ListDealsRequest) WithPageSize(pageSize int64) *ListDealsRequest {

	o.PageSize = &pageSize

	return o
}

func (o *ListDealsRequest) WithoutPageSize() *ListDealsRequest {

	o.PageSize = nil

	return o
}

//////////////////
// WithContext adds the context to the list deals Request
func (o *ListDealsRequest) WithContext(ctx context.Context) *ListDealsRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the list deals Request
func (o *ListDealsRequest) WithHTTPClient(client *http.Client) *ListDealsRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *ListDealsRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterCreatedOnFrom != nil {

		// query param filter[created_on_from]
		var qrFilterCreatedOnFrom strfmt.Date
		if o.FilterCreatedOnFrom != nil {
			qrFilterCreatedOnFrom = *o.FilterCreatedOnFrom
		}
		qFilterCreatedOnFrom := qrFilterCreatedOnFrom.String()
		if qFilterCreatedOnFrom != "" {
			if err := r.SetQueryParam("filter[created_on_from]", qFilterCreatedOnFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterCreatedOnTo != nil {

		// query param filter[created_on_to]
		var qrFilterCreatedOnTo strfmt.Date
		if o.FilterCreatedOnTo != nil {
			qrFilterCreatedOnTo = *o.FilterCreatedOnTo
		}
		qFilterCreatedOnTo := qrFilterCreatedOnTo.String()
		if qFilterCreatedOnTo != "" {
			if err := r.SetQueryParam("filter[created_on_to]", qFilterCreatedOnTo); err != nil {
				return err
			}
		}

	}

	var valuesFilterOrganisationID []string
	for _, v := range o.FilterOrganisationID {
		valuesFilterOrganisationID = append(valuesFilterOrganisationID, v.String())
	}

	joinedFilterOrganisationID := swag.JoinByFormat(valuesFilterOrganisationID, "")
	// query array param filter[organisation_id]
	if err := r.SetQueryParam("filter[organisation_id]", joinedFilterOrganisationID...); err != nil {
		return err
	}

	if o.FilterPartyID != nil {

		// query param filter[party_id]
		var qrFilterPartyID strfmt.UUID
		if o.FilterPartyID != nil {
			qrFilterPartyID = *o.FilterPartyID
		}
		qFilterPartyID := qrFilterPartyID.String()
		if qFilterPartyID != "" {
			if err := r.SetQueryParam("filter[party_id]", qFilterPartyID); err != nil {
				return err
			}
		}

	}

	if o.FilterProcessingDateFrom != nil {

		// query param filter[processing_date_from]
		var qrFilterProcessingDateFrom strfmt.Date
		if o.FilterProcessingDateFrom != nil {
			qrFilterProcessingDateFrom = *o.FilterProcessingDateFrom
		}
		qFilterProcessingDateFrom := qrFilterProcessingDateFrom.String()
		if qFilterProcessingDateFrom != "" {
			if err := r.SetQueryParam("filter[processing_date_from]", qFilterProcessingDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterProcessingDateTo != nil {

		// query param filter[processing_date_to]
		var qrFilterProcessingDateTo strfmt.Date
		if o.FilterProcessingDateTo != nil {
			qrFilterProcessingDateTo = *o.FilterProcessingDateTo
		}
		qFilterProcessingDateTo := qrFilterProcessingDateTo.String()
		if qFilterProcessingDateTo != "" {
			if err := r.SetQueryParam("filter[processing_date_to]", qFilterProcessingDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterSourceAmount != nil {

		// query param filter[source.amount]
		var qrFilterSourceAmount string
		if o.FilterSourceAmount != nil {
			qrFilterSourceAmount = *o.FilterSourceAmount
		}
		qFilterSourceAmount := qrFilterSourceAmount
		if qFilterSourceAmount != "" {
			if err := r.SetQueryParam("filter[source.amount]", qFilterSourceAmount); err != nil {
				return err
			}
		}

	}

	if o.FilterSourceCurrency != nil {

		// query param filter[source.currency]
		var qrFilterSourceCurrency string
		if o.FilterSourceCurrency != nil {
			qrFilterSourceCurrency = *o.FilterSourceCurrency
		}
		qFilterSourceCurrency := qrFilterSourceCurrency
		if qFilterSourceCurrency != "" {
			if err := r.SetQueryParam("filter[source.currency]", qFilterSourceCurrency); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionCreatedOnFrom != nil {

		// query param filter[submission.created_on_from]
		var qrFilterSubmissionCreatedOnFrom strfmt.Date
		if o.FilterSubmissionCreatedOnFrom != nil {
			qrFilterSubmissionCreatedOnFrom = *o.FilterSubmissionCreatedOnFrom
		}
		qFilterSubmissionCreatedOnFrom := qrFilterSubmissionCreatedOnFrom.String()
		if qFilterSubmissionCreatedOnFrom != "" {
			if err := r.SetQueryParam("filter[submission.created_on_from]", qFilterSubmissionCreatedOnFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionCreatedOnTo != nil {

		// query param filter[submission.created_on_to]
		var qrFilterSubmissionCreatedOnTo strfmt.Date
		if o.FilterSubmissionCreatedOnTo != nil {
			qrFilterSubmissionCreatedOnTo = *o.FilterSubmissionCreatedOnTo
		}
		qFilterSubmissionCreatedOnTo := qrFilterSubmissionCreatedOnTo.String()
		if qFilterSubmissionCreatedOnTo != "" {
			if err := r.SetQueryParam("filter[submission.created_on_to]", qFilterSubmissionCreatedOnTo); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionReference != nil {

		// query param filter[submission.reference]
		var qrFilterSubmissionReference string
		if o.FilterSubmissionReference != nil {
			qrFilterSubmissionReference = *o.FilterSubmissionReference
		}
		qFilterSubmissionReference := qrFilterSubmissionReference
		if qFilterSubmissionReference != "" {
			if err := r.SetQueryParam("filter[submission.reference]", qFilterSubmissionReference); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionStatus != nil {

		// query param filter[submission.status]
		var qrFilterSubmissionStatus string
		if o.FilterSubmissionStatus != nil {
			qrFilterSubmissionStatus = *o.FilterSubmissionStatus
		}
		qFilterSubmissionStatus := qrFilterSubmissionStatus
		if qFilterSubmissionStatus != "" {
			if err := r.SetQueryParam("filter[submission.status]", qFilterSubmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterTargetAmount != nil {

		// query param filter[target.amount]
		var qrFilterTargetAmount string
		if o.FilterTargetAmount != nil {
			qrFilterTargetAmount = *o.FilterTargetAmount
		}
		qFilterTargetAmount := qrFilterTargetAmount
		if qFilterTargetAmount != "" {
			if err := r.SetQueryParam("filter[target.amount]", qFilterTargetAmount); err != nil {
				return err
			}
		}

	}

	if o.FilterTargetCurrency != nil {

		// query param filter[target.currency]
		var qrFilterTargetCurrency string
		if o.FilterTargetCurrency != nil {
			qrFilterTargetCurrency = *o.FilterTargetCurrency
		}
		qFilterTargetCurrency := qrFilterTargetCurrency
		if qFilterTargetCurrency != "" {
			if err := r.SetQueryParam("filter[target.currency]", qFilterTargetCurrency); err != nil {
				return err
			}
		}

	}

	if o.FilterType != nil {

		// query param filter[type]
		var qrFilterType string
		if o.FilterType != nil {
			qrFilterType = *o.FilterType
		}
		qFilterType := qrFilterType
		if qFilterType != "" {
			if err := r.SetQueryParam("filter[type]", qFilterType); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber string
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {
			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
