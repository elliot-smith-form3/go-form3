// Code generated by go-swagger; DO NOT EDIT.

// :Form3: Testing!

package fx_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/form3tech-oss/go-form3/pkg/client"
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new fx api API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, defaults client.Defaults) *Client {
	return &Client{transport: transport, formats: formats, Defaults: defaults}
}

/*
Client for fx api API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	Defaults  client.Defaults
}

// range of operations

/*
create f x deal API
*/
func (a *CreateFXDealRequest) Do() (*CreateFXDealCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateFXDeal",
		Method:             "POST",
		PathPattern:        "/fx/deals",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateFXDealReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateFXDealCreated), nil

}

func (a *CreateFXDealRequest) MustDo() *CreateFXDealCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create f x deal submission API
*/
func (a *CreateFXDealSubmissionRequest) Do() (*CreateFXDealSubmissionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateFXDealSubmission",
		Method:             "POST",
		PathPattern:        "/fx/deals/{fx_deal_id}/submissions",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateFXDealSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateFXDealSubmissionCreated), nil

}

func (a *CreateFXDealSubmissionRequest) MustDo() *CreateFXDealSubmissionCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get f x deal API
*/
func (a *GetFXDealRequest) Do() (*GetFXDealOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFXDeal",
		Method:             "GET",
		PathPattern:        "/fx/deals/{fx_deal_id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetFXDealReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFXDealOK), nil

}

func (a *GetFXDealRequest) MustDo() *GetFXDealOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get f x deal submission API
*/
func (a *GetFXDealSubmissionRequest) Do() (*GetFXDealSubmissionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFXDealSubmission",
		Method:             "GET",
		PathPattern:        "/fx/deals/{fx_deal_id}/submissions/{fx_deal_submission_id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetFXDealSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFXDealSubmissionOK), nil

}

func (a *GetFXDealSubmissionRequest) MustDo() *GetFXDealSubmissionOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get f x rates API
*/
func (a *GetFXRatesRequest) Do() (*GetFXRatesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFXRates",
		Method:             "GET",
		PathPattern:        "/fx/rates",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetFXRatesReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFXRatesOK), nil

}

func (a *GetFXRatesRequest) MustDo() *GetFXRatesOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
list f x deals API
*/
func (a *ListFXDealsRequest) Do() (*ListFXDealsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListFXDeals",
		Method:             "GET",
		PathPattern:        "/fx/deals",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &ListFXDealsReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListFXDealsOK), nil

}

func (a *ListFXDealsRequest) MustDo() *ListFXDealsOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
modify f x deal submission API
*/
func (a *ModifyFXDealSubmissionRequest) Do() (*ModifyFXDealSubmissionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyFXDealSubmission",
		Method:             "PATCH",
		PathPattern:        "/fx/deals/{fx_deal_id}/submissions/{fx_deal_submission_id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &ModifyFXDealSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyFXDealSubmissionOK), nil

}

func (a *ModifyFXDealSubmissionRequest) MustDo() *ModifyFXDealSubmissionOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/////////

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
