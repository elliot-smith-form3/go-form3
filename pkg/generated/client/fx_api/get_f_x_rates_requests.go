// Code generated by go-swagger; DO NOT EDIT.

package fx_api

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.GetFXRates creates a new GetFXRatesRequest object
// with the default values initialized.
func (c *Client) GetFXRates() *GetFXRatesRequest {
	var ()
	return &GetFXRatesRequest{

		FilterPartyID: c.Defaults.GetString("GetFXRates", "filter[party_id]"),

		FilterProcessingDate: c.Defaults.GetStrfmtDatePtr("GetFXRates", "filter[processing_date]"),

		FilterSourceAmount: c.Defaults.GetStringPtr("GetFXRates", "filter[source.amount]"),

		FilterSourceCurrency: c.Defaults.GetString("GetFXRates", "filter[source.currency]"),

		FilterTargetAmount: c.Defaults.GetStringPtr("GetFXRates", "filter[target.amount]"),

		FilterTargetCurrency: c.Defaults.GetString("GetFXRates", "filter[target.currency]"),

		FilterType: c.Defaults.GetString("GetFXRates", "filter[type]"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type GetFXRatesRequest struct {

	/*FilterPartyID      The party we want to get the FX rate for      */

	FilterPartyID string

	/*FilterProcessingDate      The date for which the rate would be valid      */

	FilterProcessingDate *strfmt.Date

	/*FilterSourceAmount      The amount of currency to sell      */

	FilterSourceAmount *string

	/*FilterSourceCurrency      The currency the party wants to sell      */

	FilterSourceCurrency string

	/*FilterTargetAmount      The amount of currency to buy      */

	FilterTargetAmount *string

	/*FilterTargetCurrency      The currency the party wants to buy      */

	FilterTargetCurrency string

	/*FilterType      Type of foreign exchange      */

	FilterType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *GetFXRatesRequest) FromJson(j string) *GetFXRatesRequest {

	return o
}

func (o *GetFXRatesRequest) WithFilterPartyID(filterPartyID string) *GetFXRatesRequest {

	o.FilterPartyID = filterPartyID

	return o
}

func (o *GetFXRatesRequest) WithFilterProcessingDate(filterProcessingDate strfmt.Date) *GetFXRatesRequest {

	o.FilterProcessingDate = &filterProcessingDate

	return o
}

func (o *GetFXRatesRequest) WithoutFilterProcessingDate() *GetFXRatesRequest {

	o.FilterProcessingDate = nil

	return o
}

func (o *GetFXRatesRequest) WithFilterSourceAmount(filterSourceAmount string) *GetFXRatesRequest {

	o.FilterSourceAmount = &filterSourceAmount

	return o
}

func (o *GetFXRatesRequest) WithoutFilterSourceAmount() *GetFXRatesRequest {

	o.FilterSourceAmount = nil

	return o
}

func (o *GetFXRatesRequest) WithFilterSourceCurrency(filterSourceCurrency string) *GetFXRatesRequest {

	o.FilterSourceCurrency = filterSourceCurrency

	return o
}

func (o *GetFXRatesRequest) WithFilterTargetAmount(filterTargetAmount string) *GetFXRatesRequest {

	o.FilterTargetAmount = &filterTargetAmount

	return o
}

func (o *GetFXRatesRequest) WithoutFilterTargetAmount() *GetFXRatesRequest {

	o.FilterTargetAmount = nil

	return o
}

func (o *GetFXRatesRequest) WithFilterTargetCurrency(filterTargetCurrency string) *GetFXRatesRequest {

	o.FilterTargetCurrency = filterTargetCurrency

	return o
}

func (o *GetFXRatesRequest) WithFilterType(filterType string) *GetFXRatesRequest {

	o.FilterType = filterType

	return o
}

//////////////////
// WithContext adds the context to the get f x rates Request
func (o *GetFXRatesRequest) WithContext(ctx context.Context) *GetFXRatesRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the get f x rates Request
func (o *GetFXRatesRequest) WithHTTPClient(client *http.Client) *GetFXRatesRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *GetFXRatesRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param filter[party_id]
	qrFilterPartyID := o.FilterPartyID
	qFilterPartyID := qrFilterPartyID
	if qFilterPartyID != "" {
		if err := r.SetQueryParam("filter[party_id]", qFilterPartyID); err != nil {
			return err
		}
	}

	if o.FilterProcessingDate != nil {

		// query param filter[processing_date]
		var qrFilterProcessingDate strfmt.Date
		if o.FilterProcessingDate != nil {
			qrFilterProcessingDate = *o.FilterProcessingDate
		}
		qFilterProcessingDate := qrFilterProcessingDate.String()
		if qFilterProcessingDate != "" {
			if err := r.SetQueryParam("filter[processing_date]", qFilterProcessingDate); err != nil {
				return err
			}
		}

	}

	if o.FilterSourceAmount != nil {

		// query param filter[source.amount]
		var qrFilterSourceAmount string
		if o.FilterSourceAmount != nil {
			qrFilterSourceAmount = *o.FilterSourceAmount
		}
		qFilterSourceAmount := qrFilterSourceAmount
		if qFilterSourceAmount != "" {
			if err := r.SetQueryParam("filter[source.amount]", qFilterSourceAmount); err != nil {
				return err
			}
		}

	}

	// query param filter[source.currency]
	qrFilterSourceCurrency := o.FilterSourceCurrency
	qFilterSourceCurrency := qrFilterSourceCurrency
	if qFilterSourceCurrency != "" {
		if err := r.SetQueryParam("filter[source.currency]", qFilterSourceCurrency); err != nil {
			return err
		}
	}

	if o.FilterTargetAmount != nil {

		// query param filter[target.amount]
		var qrFilterTargetAmount string
		if o.FilterTargetAmount != nil {
			qrFilterTargetAmount = *o.FilterTargetAmount
		}
		qFilterTargetAmount := qrFilterTargetAmount
		if qFilterTargetAmount != "" {
			if err := r.SetQueryParam("filter[target.amount]", qFilterTargetAmount); err != nil {
				return err
			}
		}

	}

	// query param filter[target.currency]
	qrFilterTargetCurrency := o.FilterTargetCurrency
	qFilterTargetCurrency := qrFilterTargetCurrency
	if qFilterTargetCurrency != "" {
		if err := r.SetQueryParam("filter[target.currency]", qFilterTargetCurrency); err != nil {
			return err
		}
	}

	// query param filter[type]
	qrFilterType := o.FilterType
	qFilterType := qrFilterType
	if qFilterType != "" {
		if err := r.SetQueryParam("filter[type]", qFilterType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
